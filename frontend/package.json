'use client';

import { MapContainer, TileLayer, CircleMarker, Popup } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';
import L, { LatLngExpression, MapOptions, TileLayer as LeafletTileLayer } from 'leaflet'; // Importar TileLayer do Leaflet puro
import { useRef, useEffect } from 'react'; // Importar useRef e useEffect

// ... (código de correção do ícone como antes) ...
delete (L.Icon.Default.prototype as any)._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon-2x.png',
  iconUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon.png',
  shadowUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-shadow.png',
});

export interface MapMarkerData {
  id: number | string;
  latitude: number;
  longitude: number;
  name: string;
  type: 'hospital' | 'airport' | 'other';
  details?: string;
}

interface InteractiveMapProps {
  markers: MapMarkerData[];
  center: LatLngExpression; 
  zoom: number;
  scrollWheelZoom?: boolean; 
  style?: React.CSSProperties;
}

const markerColors = {
  hospital: 'blue',
  airport: 'red',
  other: 'green',
};

export default function InteractiveMap({
  markers,
  center = [-15.788497, -47.879873] as LatLngExpression,
  zoom = 4,
  scrollWheelZoom = true,
  style = { height: '500px', width: '100%' }
}: InteractiveMapProps) {
  
  const tileLayerRef = useRef<LeafletTileLayer | null>(null); // Ref para o TileLayer do Leaflet

  useEffect(() => {
    // Define a atribuição programaticamente após o componente montar
    // e a referência ao tileLayer do Leaflet estar disponível.
    if (tileLayerRef.current) {
      // Acessa o objeto Leaflet subjacente e suas opções
      // O tipo `L.TileLayer` tem um método `setAttribution` ou você pode definir `options.attribution`
      // No entanto, `react-leaflet` pode já ter setado as options.
      // Vamos tentar definir a opção diretamente, se possível, ou reconstruir
      // A forma mais segura é garantir que a prop é passada na criação se os tipos permitirem.
      // Como os tipos estão sendo problemáticos para a prop direta,
      // esta é uma alternativa para tentar modificar após a criação.
      // No entanto, a prop `attribution` é geralmente configurada na inicialização do L.tileLayer.
      // Se `react-leaflet` não expõe isso via props por causa de tipos, é um problema.

      // Uma maneira mais direta seria se o componente react-leaflet <TileLayer>
      // aceitasse uma prop `options` ou algo similar.
      // Como a prop `attribution` está dando erro de tipo,
      // e o componente `TileLayer` de `react-leaflet` é um wrapper,
      // pode ser que os tipos não estejam refletindo que ele passa essa prop para L.tileLayer.
      // Vamos manter a passagem direta e ver se há outro erro após as correções de MapContainer.
      // Se o erro de `attribution` em TileLayer persiste, então o problema de tipo é realmente com TileLayerProps.
    }
  }, []); // Roda uma vez após o mount


  if (typeof window === 'undefined') {
    return null; 
  }

  const mapOptions: MapOptions = {
    center: center,
    zoom: zoom,
    scrollWheelZoom: scrollWheelZoom,
  };

  return (
    <MapContainer {...mapOptions} style={style}>
      {/* Tentar passar como uma prop não reconhecida pelo TypeScript,
          mas que o componente React pode internamente passar para o Leaflet.
          Se isso ainda der erro de tipo, o problema é com @types/react-leaflet. */}
      <TileLayer
        // @ts-expect-error Se 'attribution' não está em TileLayerProps, mas é passada para Leaflet
        attribution='© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
        // ref={tileLayerRef} // Ref é mais para acesso imperativo, não para props iniciais
      />
      {markers.map((marker) => (
        <CircleMarker
          key={marker.id}
          center={[marker.latitude, marker.longitude] as LatLngExpression}
          pathOptions={{ color: markerColors[marker.type] || 'purple', fillColor: markerColors[marker.type] || 'purple', fillOpacity: 0.7 }}
          radius={8}
        >
          <Popup>
            <strong>{marker.name}</strong><br />
            Tipo: {marker.type.charAt(0).toUpperCase() + marker.type.slice(1)} <br />
            Lat: {marker.latitude.toFixed(4)}, Lon: {marker.longitude.toFixed(4)}
            {marker.details && <><br />{marker.details}</>}
          </Popup>
        </CircleMarker>
      ))}
    </MapContainer>
  );
}
